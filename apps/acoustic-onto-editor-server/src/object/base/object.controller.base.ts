/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ObjectService } from "../object.service";
import { ObjectCreateInput } from "./ObjectCreateInput";
import { Object } from "./Object";
import { ObjectFindManyArgs } from "./ObjectFindManyArgs";
import { ObjectWhereUniqueInput } from "./ObjectWhereUniqueInput";
import { ObjectUpdateInput } from "./ObjectUpdateInput";

export class ObjectControllerBase {
  constructor(protected readonly service: ObjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Object })
  async createObject(@common.Body() data: ObjectCreateInput): Promise<Object> {
    return await this.service.createObject({
      data: {
        ...data,

        idClass: data.idClass
          ? {
              connect: data.idClass,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        idClass: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Object] })
  @ApiNestedQuery(ObjectFindManyArgs)
  async objects(@common.Req() request: Request): Promise<Object[]> {
    const args = plainToClass(ObjectFindManyArgs, request.query);
    return this.service.objects({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        idClass: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Object })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async object(
    @common.Param() params: ObjectWhereUniqueInput
  ): Promise<Object | null> {
    const result = await this.service.object({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        idClass: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Object })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateObject(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() data: ObjectUpdateInput
  ): Promise<Object | null> {
    try {
      return await this.service.updateObject({
        where: params,
        data: {
          ...data,

          idClass: data.idClass
            ? {
                connect: data.idClass,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          idClass: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Object })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteObject(
    @common.Param() params: ObjectWhereUniqueInput
  ): Promise<Object | null> {
    try {
      return await this.service.deleteObject({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          idClass: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
