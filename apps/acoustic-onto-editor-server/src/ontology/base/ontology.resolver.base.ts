/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ontology } from "./Ontology";
import { OntologyCountArgs } from "./OntologyCountArgs";
import { OntologyFindManyArgs } from "./OntologyFindManyArgs";
import { OntologyFindUniqueArgs } from "./OntologyFindUniqueArgs";
import { CreateOntologyArgs } from "./CreateOntologyArgs";
import { UpdateOntologyArgs } from "./UpdateOntologyArgs";
import { DeleteOntologyArgs } from "./DeleteOntologyArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { OntologyService } from "../ontology.service";
@graphql.Resolver(() => Ontology)
export class OntologyResolverBase {
  constructor(protected readonly service: OntologyService) {}

  async _ontologiesMeta(
    @graphql.Args() args: OntologyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ontology])
  async ontologies(
    @graphql.Args() args: OntologyFindManyArgs
  ): Promise<Ontology[]> {
    return this.service.ontologies(args);
  }

  @graphql.Query(() => Ontology, { nullable: true })
  async ontology(
    @graphql.Args() args: OntologyFindUniqueArgs
  ): Promise<Ontology | null> {
    const result = await this.service.ontology(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ontology)
  async createOntology(
    @graphql.Args() args: CreateOntologyArgs
  ): Promise<Ontology> {
    return await this.service.createOntology({
      ...args,
      data: {
        ...args.data,

        idOntology: args.data.idOntology
          ? {
              connect: args.data.idOntology,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Ontology)
  async updateOntology(
    @graphql.Args() args: UpdateOntologyArgs
  ): Promise<Ontology | null> {
    try {
      return await this.service.updateOntology({
        ...args,
        data: {
          ...args.data,

          idOntology: args.data.idOntology
            ? {
                connect: args.data.idOntology,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ontology)
  async deleteOntology(
    @graphql.Args() args: DeleteOntologyArgs
  ): Promise<Ontology | null> {
    try {
      return await this.service.deleteOntology(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ClassModel, {
    nullable: true,
    name: "idOntology",
  })
  async getIdOntology(
    @graphql.Parent() parent: Ontology
  ): Promise<ClassModel | null> {
    const result = await this.service.getIdOntology(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
