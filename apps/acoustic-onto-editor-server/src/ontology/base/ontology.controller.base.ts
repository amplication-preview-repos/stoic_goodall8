/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OntologyService } from "../ontology.service";
import { OntologyCreateInput } from "./OntologyCreateInput";
import { Ontology } from "./Ontology";
import { OntologyFindManyArgs } from "./OntologyFindManyArgs";
import { OntologyWhereUniqueInput } from "./OntologyWhereUniqueInput";
import { OntologyUpdateInput } from "./OntologyUpdateInput";

export class OntologyControllerBase {
  constructor(protected readonly service: OntologyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ontology })
  async createOntology(
    @common.Body() data: OntologyCreateInput
  ): Promise<Ontology> {
    return await this.service.createOntology({
      data: {
        ...data,

        idOntology: data.idOntology
          ? {
              connect: data.idOntology,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        idOntology: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ontology] })
  @ApiNestedQuery(OntologyFindManyArgs)
  async ontologies(@common.Req() request: Request): Promise<Ontology[]> {
    const args = plainToClass(OntologyFindManyArgs, request.query);
    return this.service.ontologies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        idOntology: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ontology })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ontology(
    @common.Param() params: OntologyWhereUniqueInput
  ): Promise<Ontology | null> {
    const result = await this.service.ontology({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        idOntology: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ontology })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOntology(
    @common.Param() params: OntologyWhereUniqueInput,
    @common.Body() data: OntologyUpdateInput
  ): Promise<Ontology | null> {
    try {
      return await this.service.updateOntology({
        where: params,
        data: {
          ...data,

          idOntology: data.idOntology
            ? {
                connect: data.idOntology,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          idOntology: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ontology })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOntology(
    @common.Param() params: OntologyWhereUniqueInput
  ): Promise<Ontology | null> {
    try {
      return await this.service.deleteOntology({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          idOntology: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
