/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Ontology as PrismaOntology,
  ClassModel as PrismaClassModel,
} from "@prisma/client";

export class OntologyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OntologyCountArgs, "select">): Promise<number> {
    return this.prisma.ontology.count(args);
  }

  async ontologies(
    args: Prisma.OntologyFindManyArgs
  ): Promise<PrismaOntology[]> {
    return this.prisma.ontology.findMany(args);
  }
  async ontology(
    args: Prisma.OntologyFindUniqueArgs
  ): Promise<PrismaOntology | null> {
    return this.prisma.ontology.findUnique(args);
  }
  async createOntology(
    args: Prisma.OntologyCreateArgs
  ): Promise<PrismaOntology> {
    return this.prisma.ontology.create(args);
  }
  async updateOntology(
    args: Prisma.OntologyUpdateArgs
  ): Promise<PrismaOntology> {
    return this.prisma.ontology.update(args);
  }
  async deleteOntology(
    args: Prisma.OntologyDeleteArgs
  ): Promise<PrismaOntology> {
    return this.prisma.ontology.delete(args);
  }

  async getIdOntology(parentId: string): Promise<PrismaClassModel | null> {
    return this.prisma.ontology
      .findUnique({
        where: { id: parentId },
      })
      .idOntology();
  }
}
